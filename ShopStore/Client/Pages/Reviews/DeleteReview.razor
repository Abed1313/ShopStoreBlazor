@page "/reviews/delete/{reviewId:int}"
@using ShopStore.Client.Services
@inject ReviewService ReviewService
@inject NavigationManager NavigationManager

@code {
    [Parameter] public int ReviewId { get; set; }
    private bool isLoading = true;
    private bool reviewExists = true;

    protected override async Task OnInitializedAsync()
    {
        // Check if the review exists before attempting to delete
        reviewExists = await ReviewService.GetReviewByIdAsync(ReviewId) != null;
        isLoading = false;
    }

    private async Task ConfirmDeleteReview()  // Renamed method
    {
        await ReviewService.DeleteReviewAsync(ReviewId);
        NavigationManager.NavigateTo("/reviews");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/reviews");
    }
}

<h3>Delete Review</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!reviewExists)
{
    <p>Review not found.</p>
}
else
{
    <p>Are you sure you want to delete this review?</p>
    <button class="btn btn-danger" @onclick="ConfirmDeleteReview">Delete</button>
                // Updated method call
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
}
